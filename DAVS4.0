import yfinance as yf
import pandas as pd
import streamlit as st
from datetime import datetime
import os
from PIL import Image
import time

st.set_page_config(page_title="📈 Digitally Analysis Visualised System", layout="wide")
st.title("📈 Digitally Analysis Visualised System")

# --- Create save folders ---
if not os.path.exists("saved_charts"):
    os.makedirs("saved_charts")

# --- View Counter Function ---
def update_view_count():
    if not os.path.exists("view_count.csv"):
        pd.DataFrame({"views": [1]}).to_csv("view_count.csv", index=False)
    else:
        df = pd.read_csv("view_count.csv")
        df["views"] = df["views"] + 1
        df.to_csv("view_count.csv", index=False)
    return int(pd.read_csv("view_count.csv")["views"].iloc[0])

# --- Online Users Tracker ---
def update_online_users():
    now = time.time()
    if not os.path.exists("online_users.csv"):
        pd.DataFrame({"last_seen": [now]}).to_csv("online_users.csv", index=False)
    else:
        df = pd.read_csv("online_users.csv")
        df = df[df["last_seen"] > now - 60]  # Active in last 60 sec
        df = pd.concat([df, pd.DataFrame({"last_seen": [now]})], ignore_index=True)
        df.to_csv("online_users.csv", index=False)
    return len(df)

# --- Update Counters ---
total_views = update_view_count()
online_users = update_online_users()

# --- Sidebar Analytics ---
st.sidebar.markdown("## 📊 Analytics")
st.sidebar.write(f"👀 **Total Views:** {total_views}")
st.sidebar.write(f"🟢 **Online Users (last 1 min):** {online_users}")

# --- Disclaimer in Sidebar ---
st.sidebar.markdown("## ⚠ Disclaimer")
st.sidebar.info(
    "Ye tool sirf educational aur market analysis purpose ke liye hai.\n"
    "Yahan diye gaye trend, accuracy aur signals historical data ke adhar par hain.\n"
    "Trading me risk hota hai. Decision apne analysis ke adhar par lein.\n"
    "Hum kisi bhi loss ke liye zimmedar nahi hain."
)
symbols = {
    "Bitcoin (BTC)": "BTC-USD",
    "Ethereum (ETH)": "ETH-USD",
    "Gold (XAUUSD)": "GC=F",
    "Silver (XAGUSD)": "SI=F",

    # --- Major Forex Pairs ---
    "EUR/USD": "EURUSD=X",
    "GBP/USD": "GBPUSD=X",
    "USD/JPY": "JPY=X",
    "USD/CHF": "CHF=X",
    "AUD/USD": "AUDUSD=X",
    "NZD/USD": "NZDUSD=X",
    "USD/CAD": "CAD=X"
}



symbol = st.selectbox("Select Asset", list(symbols.keys()))
symbol_yf = symbols[symbol]
timeframes = {
    "1H": "1h",
    "15M": "15m",
    "5M": "5m"
}

# --- Data Fetch ---
def get_data(symbol, interval, period='30d'):
    df = yf.download(symbol, interval=interval, period=period)
    if isinstance(df.columns, pd.MultiIndex):
        df.columns = df.columns.get_level_values(0)
    df.dropna(inplace=True)
    return df

# --- Trend Detection (EMA-based) ---
def detect_trend(df):
    df['EMA10'] = df['Close'].ewm(span=10).mean()
    df['EMA20'] = df['Close'].ewm(span=20).mean()
    if df['EMA10'].iloc[-1] > df['EMA20'].iloc[-1]:
        return "Uptrend"
    elif df['EMA10'].iloc[-1] < df['EMA20'].iloc[-1]:
        return "Downtrend"
    else:
        return "Sideways"

# --- Price Action Detection ---
def detect_price_action(df):
    patterns = []
    for i in range(2, len(df)):
        o1, c1, h1, l1 = df.iloc[i-1][["Open", "Close", "High", "Low"]]
        o2, c2, h2, l2 = df.iloc[i][["Open", "Close", "High", "Low"]]
        if c1 < o1 and c2 > o2 and c2 > o1 and o2 < c1:
            patterns.append((df.index[i], "Bullish Engulfing"))
        elif c1 > o1 and c2 < o2 and c2 < o1 and o2 > c1:
            patterns.append((df.index[i], "Bearish Engulfing"))
        elif h2 < h1 and l2 > l1:
            patterns.append((df.index[i], "Inside Bar"))
        body = abs(c2 - o2)
        wick = h2 - l2
        if body < wick * 0.3:
            patterns.append((df.index[i], "Pin Bar"))
        if c1 < o1 and abs(c2 - o2) < 0.2 * (h2 - l2):
            if i+1 < len(df):
                o3, c3 = df.iloc[i+1][["Open", "Close"]]
                if c3 > o3:
                    patterns.append((df.index[i+1], "Morning Star"))
        if c1 > o1 and abs(c2 - o2) < 0.2 * (h2 - l2):
            if i+1 < len(df):
                o3, c3 = df.iloc[i+1][["Open", "Close"]]
                if c3 < o3:
                    patterns.append((df.index[i+1], "Evening Star"))
    return patterns

# --- Elliott Wave ---
def detect_elliott_wave_breakout(df):
    if len(df) < 6:
        return False, ""
    wave1_end = df['High'].iloc[-5]
    wave2 = df['Low'].iloc[-4]
    current_price = df['Close'].iloc[-1]
    trend = detect_trend(df)
    if trend == "Uptrend" and current_price > wave1_end:
        return True, "🌀 Elliott Wave 3 Uptrend Breakout Detected!"
    elif trend == "Downtrend" and current_price < wave2:
        return True, "🌀 Elliott Wave 3 Downtrend Breakout Detected!"
    return False, ""

# --- Signal Generator with EMA Trend + RSI filter ---
def generate_signals(df):
    df['EMA10'] = df['Close'].ewm(span=10).mean()
    df['EMA20'] = df['Close'].ewm(span=20).mean()
    delta = df['Close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df['RSI'] = 100 - (100 / (1 + rs))
    df['Signal'] = 0
    trend = detect_trend(df)
    if trend == "Uptrend" and df['RSI'].iloc[-1] > 55:
        df.iloc[-1, df.columns.get_loc('Signal')] = 1
    elif trend == "Downtrend" and df['RSI'].iloc[-1] < 45:
        df.iloc[-1, df.columns.get_loc('Signal')] = -1
    return df

# --- New ATR-based SL/TP with perfect RR ---
def generate_sl_tp(price, signal, trend, df, rr=2.0):
    high_low = df['High'] - df['Low']
    high_close = abs(df['High'] - df['Close'].shift())
    low_close = abs(df['Low'] - df['Close'].shift())
    tr = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
    atr_value = tr.rolling(14).mean().iloc[-1]

    if pd.isna(atr_value):
        atr_value = price * 0.015  # fallback

    if signal == 1:  # Buy
        sl = price - atr_value
        tp = price + (price - sl) * rr
    elif signal == -1:  # Sell
        sl = price + atr_value
        tp = price - (sl - price) * rr
    else:
        sl = tp = price

    return round(sl, 2), round(tp, 2)

# --- Backtest Strategy Accuracy ---
def backtest_strategy_accuracy(df, use_elliott=False, use_price_action=False):
    df = df.copy()
    df['EMA20'] = df['Close'].ewm(span=20).mean()
    df['EMA50'] = df['Close'].ewm(span=50).mean()
    delta = df['Close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df['RSI'] = 100 - (100 / (1 + rs))
    df['Signal'] = 0
    for i in range(len(df)):
        trend = "Uptrend" if df['EMA20'].iloc[i] > df['EMA50'].iloc[i] else "Downtrend"
        if trend == "Uptrend" and df['RSI'].iloc[i] > 50:
            df.iloc[i, df.columns.get_loc('Signal')] = 1
        elif trend == "Downtrend" and df['RSI'].iloc[i] < 50:
            df.iloc[i, df.columns.get_loc('Signal')] = -1
    if use_elliott:
        for i in range(6, len(df)):
            sub_df = df.iloc[:i+1]
            breakout, _ = detect_elliott_wave_breakout(sub_df)
            if not breakout:
                df.iloc[i, df.columns.get_loc('Signal')] = 0
    if use_price_action:
        valid_dates = [p[0] for p in detect_price_action(df)]
        df['Signal'] = df.apply(lambda row: row['Signal'] if row.name in valid_dates else 0, axis=1)
    df['Return'] = df['Close'].pct_change().shift(-1)
    df['StrategyReturn'] = df['Signal'].shift(1) * df['Return']
    total_signals = df[df['Signal'] != 0]
    correct = df[df['StrategyReturn'] > 0]
    accuracy = round(len(correct) / len(total_signals) * 100, 2) if len(total_signals) else 0
    return accuracy

# --- Main Display ---
for tf_label, tf_code in timeframes.items():
    st.markdown("---")
    st.subheader(f"🕒 Timeframe: {tf_label}")
    df = get_data(symbol_yf, tf_code)
    trend = detect_trend(df)
    df = generate_signals(df)
    signal = int(df['Signal'].iloc[-1])
    price = round(df['Close'].iloc[-1], 2)
    sl, tp = generate_sl_tp(price, signal, trend, df, rr=2.0)  # ATR based
    rr_ratio = round(abs(tp - price) / abs(price - sl), 2) if price != sl else "∞"
    signal_text = "Bullish Signal" if signal == 1 else "Bearish Signal" if signal == -1 else "Neutral"
    acc_ema_rsi = backtest_strategy_accuracy(df)
    acc_epa_rsi = backtest_strategy_accuracy(df, use_elliott=True, use_price_action=True)
    st.write(f"**Trend:** `{trend}`")
    st.write(f"**Signal:** `{signal_text}`")
    st.metric("📘 EMA+RSI Accuracy", f"{acc_ema_rsi}%")
    st.metric("🔮 Elliott+PA+RSI Accuracy", f"{acc_epa_rsi}%")
    st.write(f"**Entry Price:** `{price}` | **SL:** `{sl}` | **TP:** `{tp}`")
    st.write(f"📊 **Risk/Reward Ratio:** `{rr_ratio}`")
    breakout, message = detect_elliott_wave_breakout(df)
    if breakout:
        st.warning(message)
    st.markdown("### 📈 Profit Probability Estimate")
    st.info(f"📘 **EMA+RSI Strategy Profit Chance:** `{acc_ema_rsi}%` | Loss: `{100 - acc_ema_rsi}%`")
    st.success(f"🔮 **Elliott+PA+RSI Strategy Profit Chance:** `{acc_epa_rsi}%` | Loss: `{100 - acc_epa_rsi}%`")# --- Chat Box System ---
CHAT_FILE = "chat_messages.csv"

# Create file if not exists
if not os.path.exists(CHAT_FILE):
    pd.DataFrame(columns=["time", "user", "message"]).to_csv(CHAT_FILE, index=False)

st.sidebar.markdown("## 💬 Community Chat")

# Load messages
def load_chat():
    return pd.read_csv(CHAT_FILE)

# Save new message
def save_message(user, message):
    df = load_chat()
    new_msg = pd.DataFrame({
        "time": [datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
        "user": [user],
        "message": [message]
    })
    df = pd.concat([df, new_msg], ignore_index=True)
    df.to_csv(CHAT_FILE, index=False)

# Delete message (Admin only)
def delete_message(index):
    df = load_chat()
    df = df.drop(index)
    df.to_csv(CHAT_FILE, index=False)

# --- Chat Input ---
with st.sidebar.form("chat_form", clear_on_submit=True):
    user = st.text_input("Your Name")
    message = st.text_area("Type your message")
    submitted = st.form_submit_button("Send")
    if submitted and user and message:
        save_message(user, message)

# --- Display Messages ---
st.sidebar.markdown("### 📜 Chat History")
chat_df = load_chat()

for i, row in chat_df.iterrows():
    st.sidebar.write(f"**{row['user']}** ({row['time']}): {row['message']}")
    # Admin Delete Button
    if st.sidebar.button(f"❌ Delete {i}", key=f"del_{i}"):
        delete_message(i)
        st.rerun()
